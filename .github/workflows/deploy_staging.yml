name: Release Pipeline Staging

on:
  push:
    branches: [staging]

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set release version tag
        id: release-version
        run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}

      # Start AWS environment
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and push image
        id: tag-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ambisis-sync-service-stg
          IMAGE_TAG: stg-${{ github.sha }}-${{ github.run_number }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$REGISTRY/$REPOSITORY:$IMAGE_TAG"

      # Start AWS environment
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ambisis-sync-service-stg-td --query taskDefinition > task-definition.json

      - name: Update task definition with new image
        run: |
          IMAGE_URI=${{ steps.tag-image.outputs.image }}
          jq --arg IMAGE_URI "$IMAGE_URI" 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .enableFaultInjection) | .containerDefinitions[0].image = $IMAGE_URI' task-definition.json > new-task-definition.json

      - name: Register new task definition
        id: register-task-def
        run: |
          new_task_def_arn=$(aws ecs register-task-definition --cli-input-json file://new-task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "::set-output name=new_task_def_arn::$new_task_def_arn"

      # - name: Update ECS service with new task definition
      #   run: |
      #     aws ecs update-service \
      #     --cluster ambisis-staging-cluster \
      #     --service ambisis-sync-service-staging \
      #     --task-definition ${{ steps.register-task-def.outputs.new_task_def_arn }}
